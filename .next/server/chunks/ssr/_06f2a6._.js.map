{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\r\n\r\nexport const formatCurrency = (amount: number) => {\r\n  return (amount / 100).toLocaleString('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  });\r\n};\r\n\r\nexport const formatDateToLocal = (\r\n  dateStr: string,\r\n  locale: string = 'en-US',\r\n) => {\r\n  const date = new Date(dateStr);\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    day: 'numeric',\r\n    month: 'short',\r\n    year: 'numeric',\r\n  };\r\n  const formatter = new Intl.DateTimeFormat(locale, options);\r\n  return formatter.format(date);\r\n};\r\n\r\nexport const generateYAxis = (revenue: Revenue[]) => {\r\n  // Calculate what labels we need to display on the y-axis\r\n  // based on highest record and in 1000s\r\n  const yAxisLabels = [];\r\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\r\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\r\n\r\n  for (let i = topLabel; i >= 0; i -= 1000) {\r\n    yAxisLabels.push(`$${i / 1000}K`);\r\n  }\r\n\r\n  return { yAxisLabels, topLabel };\r\n};\r\n\r\nexport const generatePagination = (currentPage: number, totalPages: number) => {\r\n  // If the total number of pages is 7 or less,\r\n  // display all pages without any ellipsis.\r\n  if (totalPages <= 7) {\r\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\r\n  }\r\n\r\n  // If the current page is among the first 3 pages,\r\n  // show the first 3, an ellipsis, and the last 2 pages.\r\n  if (currentPage <= 3) {\r\n    return [1, 2, 3, '...', totalPages - 1, totalPages];\r\n  }\r\n\r\n  // If the current page is among the last 3 pages,\r\n  // show the first 2, an ellipsis, and the last 3 pages.\r\n  if (currentPage >= totalPages - 2) {\r\n    return [1, 2, '...', totalPages - 2, totalPages - 1, totalPages];\r\n  }\r\n\r\n  // If the current page is somewhere in the middle,\r\n  // show the first page, an ellipsis, the current page and its neighbors,\r\n  // another ellipsis, and the last page.\r\n  return [\r\n    1,\r\n    '...',\r\n    currentPage - 1,\r\n    currentPage,\r\n    currentPage + 1,\r\n    '...',\r\n    totalPages,\r\n  ];\r\n};\r\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,CAAC,SAAS,GAAG,EAAE,cAAc,CAAC,SAAS;QAC5C,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,oBAAoB,CAC/B,SACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,UAAsC;QAC1C,KAAK;QACL,OAAO;QACP,MAAM;IACR;IACA,MAAM,YAAY,IAAI,KAAK,cAAc,CAAC,QAAQ;IAClD,OAAO,UAAU,MAAM,CAAC;AAC1B;AAEO,MAAM,gBAAgB,CAAC;IAC5B,yDAAyD;IACzD,uCAAuC;IACvC,MAAM,cAAc,EAAE;IACtB,MAAM,gBAAgB,KAAK,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO;IACtE,MAAM,WAAW,KAAK,IAAI,CAAC,gBAAgB,QAAQ;IAEnD,IAAK,IAAI,IAAI,UAAU,KAAK,GAAG,KAAK,KAAM;QACxC,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC;IAClC;IAEA,OAAO;QAAE;QAAa;IAAS;AACjC;AAEO,MAAM,qBAAqB,CAAC,aAAqB;IACtD,6CAA6C;IAC7C,0CAA0C;IAC1C,IAAI,cAAc,GAAG;QACnB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAW,GAAG,CAAC,GAAG,IAAM,IAAI;IAC1D;IAEA,kDAAkD;IAClD,uDAAuD;IACvD,IAAI,eAAe,GAAG;QACpB,OAAO;YAAC;YAAG;YAAG;YAAG;YAAO,aAAa;YAAG;SAAW;IACrD;IAEA,iDAAiD;IACjD,uDAAuD;IACvD,IAAI,eAAe,aAAa,GAAG;QACjC,OAAO;YAAC;YAAG;YAAG;YAAO,aAAa;YAAG,aAAa;YAAG;SAAW;IAClE;IAEA,kDAAkD;IAClD,wEAAwE;IACxE,uCAAuC;IACvC,OAAO;QACL;QACA;QACA,cAAc;QACd;QACA,cAAc;QACd;QACA;KACD;AACH"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/lib/data.ts"],"sourcesContent":["import { sql } from '@vercel/postgres';\r\nimport {\r\n  CustomerField,\r\n  CustomersTableType,\r\n  InvoiceForm,\r\n  InvoicesTable,\r\n  LatestInvoiceRaw,\r\n  Revenue,\r\n} from './definitions';\r\nimport { formatCurrency } from './utils';\r\n\r\nexport async function fetchRevenue() {\r\n  try {\r\n    // Artificially delay a response for demo purposes.\r\n    // Don't do this in production :)\r\n\r\n    // console.log('Fetching revenue data...');\r\n    // await new Promise((resolve) => setTimeout(resolve, 3000));\r\n\r\n    const data = await sql<Revenue>`SELECT * FROM revenue`;\r\n\r\n    // console.log('Data fetch completed after 3 seconds.');\r\n\r\n    return data.rows;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch revenue data.');\r\n  }\r\n}\r\n\r\nexport async function fetchLatestInvoices() {\r\n  try {\r\n    const data = await sql<LatestInvoiceRaw>`\r\n      SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\r\n      FROM invoices\r\n      JOIN customers ON invoices.customer_id = customers.id\r\n      ORDER BY invoices.date DESC\r\n      LIMIT 5`;\r\n\r\n    const latestInvoices = data.rows.map((invoice) => ({\r\n      ...invoice,\r\n      amount: formatCurrency(invoice.amount),\r\n    }));\r\n    return latestInvoices;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch the latest invoices.');\r\n  }\r\n}\r\n\r\nexport async function fetchCardData() {\r\n  try {\r\n    // You can probably combine these into a single SQL query\r\n    // However, we are intentionally splitting them to demonstrate\r\n    // how to initialize multiple queries in parallel with JS.\r\n    const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\r\n    const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\r\n    const invoiceStatusPromise = sql`SELECT\r\n         SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\r\n         SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\r\n         FROM invoices`;\r\n\r\n    const data = await Promise.all([\r\n      invoiceCountPromise,\r\n      customerCountPromise,\r\n      invoiceStatusPromise,\r\n    ]);\r\n\r\n    const numberOfInvoices = Number(data[0].rows[0].count ?? '0');\r\n    const numberOfCustomers = Number(data[1].rows[0].count ?? '0');\r\n    const totalPaidInvoices = formatCurrency(data[2].rows[0].paid ?? '0');\r\n    const totalPendingInvoices = formatCurrency(data[2].rows[0].pending ?? '0');\r\n\r\n    return {\r\n      numberOfCustomers,\r\n      numberOfInvoices,\r\n      totalPaidInvoices,\r\n      totalPendingInvoices,\r\n    };\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch card data.');\r\n  }\r\n}\r\n\r\nconst ITEMS_PER_PAGE = 6;\r\nexport async function fetchFilteredInvoices(\r\n  query: string,\r\n  currentPage: number,\r\n) {\r\n  const offset = (currentPage - 1) * ITEMS_PER_PAGE;\r\n\r\n  try {\r\n    const invoices = await sql<InvoicesTable>`\r\n      SELECT\r\n        invoices.id,\r\n        invoices.amount,\r\n        invoices.date,\r\n        invoices.status,\r\n        customers.name,\r\n        customers.email,\r\n        customers.image_url\r\n      FROM invoices\r\n      JOIN customers ON invoices.customer_id = customers.id\r\n      WHERE\r\n        customers.name ILIKE ${`%${query}%`} OR\r\n        customers.email ILIKE ${`%${query}%`} OR\r\n        invoices.amount::text ILIKE ${`%${query}%`} OR\r\n        invoices.date::text ILIKE ${`%${query}%`} OR\r\n        invoices.status ILIKE ${`%${query}%`}\r\n      ORDER BY invoices.date DESC\r\n      LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\r\n    `;\r\n\r\n    return invoices.rows;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch invoices.');\r\n  }\r\n}\r\n\r\nexport async function fetchInvoicesPages(query: string) {\r\n  try {\r\n    const count = await sql`SELECT COUNT(*)\r\n    FROM invoices\r\n    JOIN customers ON invoices.customer_id = customers.id\r\n    WHERE\r\n      customers.name ILIKE ${`%${query}%`} OR\r\n      customers.email ILIKE ${`%${query}%`} OR\r\n      invoices.amount::text ILIKE ${`%${query}%`} OR\r\n      invoices.date::text ILIKE ${`%${query}%`} OR\r\n      invoices.status ILIKE ${`%${query}%`}\r\n  `;\r\n\r\n    const totalPages = Math.ceil(Number(count.rows[0].count) / ITEMS_PER_PAGE);\r\n    return totalPages;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch total number of invoices.');\r\n  }\r\n}\r\n\r\nexport async function fetchInvoiceById(id: string) {\r\n  try {\r\n    const data = await sql<InvoiceForm>`\r\n      SELECT\r\n        invoices.id,\r\n        invoices.customer_id,\r\n        invoices.amount,\r\n        invoices.status\r\n      FROM invoices\r\n      WHERE invoices.id = ${id};\r\n    `;\r\n\r\n    const invoice = data.rows.map((invoice) => ({\r\n      ...invoice,\r\n      // Convert amount from cents to dollars\r\n      amount: invoice.amount / 100,\r\n    }));\r\n\r\n    return invoice[0];\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch invoice.');\r\n  }\r\n}\r\n\r\nexport async function fetchCustomers() {\r\n  try {\r\n    const data = await sql<CustomerField>`\r\n      SELECT\r\n        id,\r\n        name\r\n      FROM customers\r\n      ORDER BY name ASC\r\n    `;\r\n\r\n    const customers = data.rows;\r\n    return customers;\r\n  } catch (err) {\r\n    console.error('Database Error:', err);\r\n    throw new Error('Failed to fetch all customers.');\r\n  }\r\n}\r\n\r\nexport async function fetchFilteredCustomers(query: string) {\r\n  try {\r\n    const data = await sql<CustomersTableType>`\r\n\t\tSELECT\r\n\t\t  customers.id,\r\n\t\t  customers.name,\r\n\t\t  customers.email,\r\n\t\t  customers.image_url,\r\n\t\t  COUNT(invoices.id) AS total_invoices,\r\n\t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\r\n\t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\r\n\t\tFROM customers\r\n\t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\r\n\t\tWHERE\r\n\t\t  customers.name ILIKE ${`%${query}%`} OR\r\n        customers.email ILIKE ${`%${query}%`}\r\n\t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\r\n\t\tORDER BY customers.name ASC\r\n\t  `;\r\n\r\n    const customers = data.rows.map((customer) => ({\r\n      ...customer,\r\n      total_pending: formatCurrency(customer.total_pending),\r\n      total_paid: formatCurrency(customer.total_paid),\r\n    }));\r\n\r\n    return customers;\r\n  } catch (err) {\r\n    console.error('Database Error:', err);\r\n    throw new Error('Failed to fetch customer table.');\r\n  }\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/ui/search.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/search.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/search.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,8cAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqR,GAClT,mDACA"}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/ui/search.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/search.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/search.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,8cAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiQ,GAC9R,+BACA"}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/ui/customers/table.tsx"],"sourcesContent":["import Image from 'next/image';\r\nimport { lusitana } from '@/app/ui/fonts';\r\nimport Search from '@/app/ui/search';\r\nimport {\r\n  CustomersTableType,\r\n  FormattedCustomersTable,\r\n} from '@/app/lib/definitions';\r\n\r\nexport default async function CustomersTable({\r\n  customers,\r\n}: {\r\n  customers: FormattedCustomersTable[];\r\n}) {\r\n  return (\r\n    <div className=\"w-full\">\r\n      <h1 className={`${lusitana.className} mb-8 text-xl md:text-2xl`}>\r\n        Customers\r\n      </h1>\r\n      <Search placeholder=\"Search customers...\" />\r\n      <div className=\"mt-6 flow-root\">\r\n        <div className=\"overflow-x-auto\">\r\n          <div className=\"inline-block min-w-full align-middle\">\r\n            <div className=\"overflow-hidden rounded-md bg-gray-50 p-2 md:pt-0\">\r\n              <div className=\"md:hidden\">\r\n                {customers?.map((customer) => (\r\n                  <div\r\n                    key={customer.id}\r\n                    className=\"mb-2 w-full rounded-md bg-white p-4\"\r\n                  >\r\n                    <div className=\"flex items-center justify-between border-b pb-4\">\r\n                      <div>\r\n                        <div className=\"mb-2 flex items-center\">\r\n                          <div className=\"flex items-center gap-3\">\r\n                            <Image\r\n                              src={customer.image_url}\r\n                              className=\"rounded-full\"\r\n                              alt={`${customer.name}'s profile picture`}\r\n                              width={28}\r\n                              height={28}\r\n                            />\r\n                            <p>{customer.name}</p>\r\n                          </div>\r\n                        </div>\r\n                        <p className=\"text-sm text-gray-500\">\r\n                          {customer.email}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex w-full items-center justify-between border-b py-5\">\r\n                      <div className=\"flex w-1/2 flex-col\">\r\n                        <p className=\"text-xs\">Pending</p>\r\n                        <p className=\"font-medium\">{customer.total_pending}</p>\r\n                      </div>\r\n                      <div className=\"flex w-1/2 flex-col\">\r\n                        <p className=\"text-xs\">Paid</p>\r\n                        <p className=\"font-medium\">{customer.total_paid}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"pt-4 text-sm\">\r\n                      <p>{customer.total_invoices} invoices</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              <table className=\"hidden min-w-full rounded-md text-gray-900 md:table\">\r\n                <thead className=\"rounded-md bg-gray-50 text-left text-sm font-normal\">\r\n                  <tr>\r\n                    <th scope=\"col\" className=\"px-4 py-5 font-medium sm:pl-6\">\r\n                      Name\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-3 py-5 font-medium\">\r\n                      Email\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-3 py-5 font-medium\">\r\n                      Total Invoices\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-3 py-5 font-medium\">\r\n                      Total Pending\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-4 py-5 font-medium\">\r\n                      Total Paid\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n\r\n                <tbody className=\"divide-y divide-gray-200 text-gray-900\">\r\n                  {customers.map((customer) => (\r\n                    <tr key={customer.id} className=\"group\">\r\n                      <td className=\"whitespace-nowrap bg-white py-5 pl-4 pr-3 text-sm text-black group-first-of-type:rounded-md group-last-of-type:rounded-md sm:pl-6\">\r\n                        <div className=\"flex items-center gap-3\">\r\n                          <Image\r\n                            src={customer.image_url}\r\n                            className=\"rounded-full\"\r\n                            alt={`${customer.name}'s profile picture`}\r\n                            width={28}\r\n                            height={28}\r\n                          />\r\n                          <p>{customer.name}</p>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap bg-white px-4 py-5 text-sm\">\r\n                        {customer.email}\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap bg-white px-4 py-5 text-sm\">\r\n                        {customer.total_invoices}\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap bg-white px-4 py-5 text-sm\">\r\n                        {customer.total_pending}\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap bg-white px-4 py-5 text-sm group-first-of-type:rounded-md group-last-of-type:rounded-md\">\r\n                        {customer.total_paid}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AADA;;;;;AAOe,eAAe,eAAe,EAC3C,SAAS,EAGV;IACC,qBACE,ucAAC;QAAI,WAAU;;0BACb,ucAAC;gBAAG,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC;0BAAE;;;;;;0BAGjE,ucAAC,oHAAA,CAAA,UAAM;gBAAC,aAAY;;;;;;0BACpB,ucAAC;gBAAI,WAAU;0BACb,cAAA,ucAAC;oBAAI,WAAU;8BACb,cAAA,ucAAC;wBAAI,WAAU;kCACb,cAAA,ucAAC;4BAAI,WAAU;;8CACb,ucAAC;oCAAI,WAAU;8CACZ,WAAW,IAAI,CAAC,yBACf,ucAAC;4CAEC,WAAU;;8DAEV,ucAAC;oDAAI,WAAU;8DACb,cAAA,ucAAC;;0EACC,ucAAC;gEAAI,WAAU;0EACb,cAAA,ucAAC;oEAAI,WAAU;;sFACb,ucAAC,sVAAA,CAAA,UAAK;4EACJ,KAAK,SAAS,SAAS;4EACvB,WAAU;4EACV,KAAK,GAAG,SAAS,IAAI,CAAC,kBAAkB,CAAC;4EACzC,OAAO;4EACP,QAAQ;;;;;;sFAEV,ucAAC;sFAAG,SAAS,IAAI;;;;;;;;;;;;;;;;;0EAGrB,ucAAC;gEAAE,WAAU;0EACV,SAAS,KAAK;;;;;;;;;;;;;;;;;8DAIrB,ucAAC;oDAAI,WAAU;;sEACb,ucAAC;4DAAI,WAAU;;8EACb,ucAAC;oEAAE,WAAU;8EAAU;;;;;;8EACvB,ucAAC;oEAAE,WAAU;8EAAe,SAAS,aAAa;;;;;;;;;;;;sEAEpD,ucAAC;4DAAI,WAAU;;8EACb,ucAAC;oEAAE,WAAU;8EAAU;;;;;;8EACvB,ucAAC;oEAAE,WAAU;8EAAe,SAAS,UAAU;;;;;;;;;;;;;;;;;;8DAGnD,ucAAC;oDAAI,WAAU;8DACb,cAAA,ucAAC;;4DAAG,SAAS,cAAc;4DAAC;;;;;;;;;;;;;2CAjCzB,SAAS,EAAE;;;;;;;;;;8CAsCtB,ucAAC;oCAAM,WAAU;;sDACf,ucAAC;4CAAM,WAAU;sDACf,cAAA,ucAAC;;kEACC,ucAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAgC;;;;;;kEAG1D,ucAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAwB;;;;;;kEAGlD,ucAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAwB;;;;;;kEAGlD,ucAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAwB;;;;;;kEAGlD,ucAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAwB;;;;;;;;;;;;;;;;;sDAMtD,ucAAC;4CAAM,WAAU;sDACd,UAAU,GAAG,CAAC,CAAC,yBACd,ucAAC;oDAAqB,WAAU;;sEAC9B,ucAAC;4DAAG,WAAU;sEACZ,cAAA,ucAAC;gEAAI,WAAU;;kFACb,ucAAC,sVAAA,CAAA,UAAK;wEACJ,KAAK,SAAS,SAAS;wEACvB,WAAU;wEACV,KAAK,GAAG,SAAS,IAAI,CAAC,kBAAkB,CAAC;wEACzC,OAAO;wEACP,QAAQ;;;;;;kFAEV,ucAAC;kFAAG,SAAS,IAAI;;;;;;;;;;;;;;;;;sEAGrB,ucAAC;4DAAG,WAAU;sEACX,SAAS,KAAK;;;;;;sEAEjB,ucAAC;4DAAG,WAAU;sEACX,SAAS,cAAc;;;;;;sEAE1B,ucAAC;4DAAG,WAAU;sEACX,SAAS,aAAa;;;;;;sEAEzB,ucAAC;4DAAG,WAAU;sEACX,SAAS,UAAU;;;;;;;mDAvBf,SAAS,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCxC"}},
    {"offset": {"line": 701, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/dashboard/customers/page.tsx"],"sourcesContent":["import { fetchFilteredCustomers } from '@/app/lib/data';\r\nimport CustomersTable from '@/app/ui/customers/table';\r\nimport { Metadata } from 'next';\r\n\r\nexport const metadata: Metadata = {\r\n  title: 'Customers',\r\n};\r\n\r\nexport default async function Page(props: {\r\n  searchParams?: Promise<{\r\n    query?: string;\r\n    page?: string;\r\n  }>;\r\n}) {\r\n  const searchParams = await props.searchParams;\r\n  const query = searchParams?.query || '';\r\n\r\n  const customers = await fetchFilteredCustomers(query);\r\n\r\n  return (\r\n    <main>\r\n      <CustomersTable customers={customers} />\r\n    </main>\r\n  );\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;;AAGO,MAAM,WAAqB;IAChC,OAAO;AACT;AAEe,eAAe,KAAK,KAKlC;IACC,MAAM,eAAe,MAAM,MAAM,YAAY;IAC7C,MAAM,QAAQ,cAAc,SAAS;IAErC,MAAM,YAAY,MAAM,CAAA,GAAA,kHAAA,CAAA,yBAAsB,AAAD,EAAE;IAE/C,qBACE,ucAAC;kBACC,cAAA,ucAAC,gIAAA,CAAA,UAAc;YAAC,WAAW;;;;;;;;;;;AAGjC"}},
    {"offset": {"line": 738, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 749, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/.next-internal/server/app/dashboard/customers/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n  '75fbe48fa3e35c63192f88d1c60e680fded3dbd1': (...args) => Promise.resolve(require('ACTIONS_MODULE0')).then(mod => (0, mod['$$RSC_SERVER_ACTION_0'])(...args)),\n});"],"names":[],"mappings":"AAAA,2BAA2B;IACzB,4CAA4C,CAAC,GAAG,OAAS,QAAQ,OAAO,yFAA6B,IAAI,CAAC,CAAA,MAAO,CAAC,GAAG,GAAG,CAAC,wBAAwB,KAAK;AACxJ"}},
    {"offset": {"line": 752, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}